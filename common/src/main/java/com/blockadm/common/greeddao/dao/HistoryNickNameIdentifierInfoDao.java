package com.blockadm.common.greeddao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.blockadm.common.greeddao.bean.HistoryNickNameIdentifierInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_NICK_NAME_IDENTIFIER_INFO".
*/
public class HistoryNickNameIdentifierInfoDao extends AbstractDao<HistoryNickNameIdentifierInfo, Long> {

    public static final String TABLENAME = "HISTORY_NICK_NAME_IDENTIFIER_INFO";

    /**
     * Properties of entity HistoryNickNameIdentifierInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "Id", true, "_id");
        public final static Property NickName = new Property(1, String.class, "nickName", false, "NICK_NAME");
        public final static Property Identifier = new Property(2, String.class, "identifier", false, "IDENTIFIER");
        public final static Property HeadImageUrl = new Property(3, String.class, "headImageUrl", false, "HEAD_IMAGE_URL");
    }


    public HistoryNickNameIdentifierInfoDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryNickNameIdentifierInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_NICK_NAME_IDENTIFIER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: Id
                "\"NICK_NAME\" TEXT," + // 1: nickName
                "\"IDENTIFIER\" TEXT," + // 2: identifier
                "\"HEAD_IMAGE_URL\" TEXT);"); // 3: headImageUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_NICK_NAME_IDENTIFIER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryNickNameIdentifierInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String identifier = entity.getIdentifier();
        if (identifier != null) {
            stmt.bindString(3, identifier);
        }
 
        String headImageUrl = entity.getHeadImageUrl();
        if (headImageUrl != null) {
            stmt.bindString(4, headImageUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryNickNameIdentifierInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String identifier = entity.getIdentifier();
        if (identifier != null) {
            stmt.bindString(3, identifier);
        }
 
        String headImageUrl = entity.getHeadImageUrl();
        if (headImageUrl != null) {
            stmt.bindString(4, headImageUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryNickNameIdentifierInfo readEntity(Cursor cursor, int offset) {
        HistoryNickNameIdentifierInfo entity = new HistoryNickNameIdentifierInfo( //
            cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // identifier
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // headImageUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryNickNameIdentifierInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setNickName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdentifier(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeadImageUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryNickNameIdentifierInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryNickNameIdentifierInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryNickNameIdentifierInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
